---
import Layout from '../layouts/Layout.astro';
import RepoCard from '../components/RepoCard.astro';
import { Octokit } from '@octokit/rest';

// Create a function to fetch data that we can reuse
async function fetchGitHubData() {
  const octokit = new Octokit();
  const username = 'alibahrami2001';

  const [reposResponse, userResponse] = await Promise.all([
    octokit.repos.listForUser({
      username,
      sort: 'updated',
      per_page: 100
    }),
    octokit.users.getByUsername({
      username
    })
  ]);

  return {
    repos: reposResponse.data,
    user: userResponse.data
  };
}

const { repos, user } = await fetchGitHubData();
---

<Layout title="Ali Bahrami - GitHub Portfolio">
  <div class="min-h-screen bg-gradient-to-b from-gray-950 via-blue-950 to-gray-950">
    <header class="relative overflow-hidden">
      <div class="absolute inset-0 bg-gradient-to-r from-blue-500/10 via-cyan-500/10 to-teal-500/10"></div>
      <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 pt-32 pb-20 relative">
        <div class="text-center">
          <div class="mb-8 relative">
            <div class="w-32 h-32 mx-auto mb-6 rounded-full overflow-hidden bg-gradient-to-r from-blue-500 via-cyan-500 to-teal-500 p-1 shadow-2xl">
              <img
                src={user.avatar_url}
                alt="Ali Bahrami"
                class="w-full h-full rounded-full object-cover bg-gray-950"
              />
            </div>
            <h1 class="text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 mb-4">
              Ali Bahrami
            </h1>
            <p class="text-xl text-gray-300 mb-6 max-w-2xl mx-auto">
              {user.bio || 'Software Developer & Open Source Enthusiast'}
            </p>
            <div class="flex justify-center gap-4">
              <a
                href={`https://github.com/${user.login}`}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-blue-500 via-cyan-500 to-teal-500 text-white font-medium hover:opacity-90 transition-all duration-300 shadow-lg hover:shadow-blue-500/25"
              >
                View GitHub Profile
                <span class="ml-2">â†’</span>
              </a>
            </div>
          </div>
          
          <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 max-w-2xl mx-auto mt-12">
            <div class="bg-gray-800/50 rounded-lg p-4 backdrop-blur-sm border border-gray-700/50">
              <div class="text-2xl font-bold text-white">{repos.length}</div>
              <div class="text-gray-400 text-sm">Repositories</div>
            </div>
            <div class="bg-gray-800/50 rounded-lg p-4 backdrop-blur-sm border border-gray-700/50">
              <div class="text-2xl font-bold text-white">{user.followers}</div>
              <div class="text-gray-400 text-sm">Followers</div>
            </div>
            <div class="bg-gray-800/50 rounded-lg p-4 backdrop-blur-sm border border-gray-700/50">
              <div class="text-2xl font-bold text-white">{user.following}</div>
              <div class="text-gray-400 text-sm">Following</div>
            </div>
            <div class="bg-gray-800/50 rounded-lg p-4 backdrop-blur-sm border border-gray-700/50">
              <div class="text-2xl font-bold text-white">{repos.reduce((acc, repo) => acc + repo.stargazers_count, 0)}</div>
              <div class="text-gray-400 text-sm">Total Stars</div>
            </div>
          </div>
        </div>
      </div>
    </header>

    <main class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <h2 class="text-3xl font-bold text-white mb-8 text-center">
        Latest Projects
      </h2>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6" id="repos-container">
        {repos.map((repo) => (
          <RepoCard repo={repo} />
        ))}
      </div>
    </main>
  </div>

  <script>
    function updateRepos() {
      fetch(window.location.href)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newRepos = doc.getElementById('repos-container');
          const currentRepos = document.getElementById('repos-container');
          if (newRepos && currentRepos) {
            currentRepos.innerHTML = newRepos.innerHTML;
          }
        });
    }

    // Check for updates every 30 seconds
    setInterval(updateRepos, 30000);
  </script>
</Layout>